@inject FlashCardsDbService Database
@inject WordsApiService WordsApi

<div class="content">

    <MatSlideToggle @onclick="ToggleVocab" @bind-Value="@isVocab" Label="@toggleLabel"></MatSlideToggle>
    @if (!isVocab)
    {
        <h4>Add Standard Cards</h4>
        <div class="col">
            <MatTextField Style="width:50em" @bind-Value="question" TextArea="true" Label="Flashcard Question"></MatTextField><br />
            <MatTextField Style="width:50em" @bind-Value="answer" TextArea="true" Label="Correct Answer"></MatTextField><br />

            <button class="btn btn-primary" @onclick="AddCardToDeck">Add Card to Deck</button>
        </div>
    }
    else
    {
        <h4>Create Vocabulary Flashcards</h4>
        <div class="col">
            <MatTextField @bind-Value="wordSearch" @onkeyup="VocakKeyUp" Label="Vocab Word"></MatTextField>
            <button class="btn btn-primary" @onclick="CreateVocabCard">Add Vocab Card</button>
        </div>
    }
</div>
<div class="content">
    @if (selectedDeck != null && selectedDeck.Cards != null)
    {
        <p>Cards in deck</p>
        <div class="card-columns" style="flex:none; width:69em">
            @foreach (var card in selectedDeck.Cards)
            {
                <div class="card smallCard mat-elevation-z24">
                    <ul>
                        <li><span style="font-size:1.3em">Question</span><br /> @card.Question</li>
                        <li><span style="font-size:1.3em">Answer</span><br /> @((MarkupString)card.Answer)</li>
                    </ul>
                </div>
            }
        </div>
    }
</div>
@code {

    [CascadingParameter]
    Deck selectedDeck { get; set; }
    [CascadingParameter]
    List<Deck> UserDecks { get; set; }
    [Parameter]
    public List<Card> UserCards { get; set; }
    [Parameter]
    public EventCallback<List<Card>> UserCardsChanged { get; set; }
    string question;
    string answer;
    string wordSearch;
    string toggleLabel = "Standard Card";
    bool isVocab = false;
    protected override async Task OnInitializedAsync()
    {
        UserCards = await Database.GetDeckCards(selectedDeck);
        if (selectedDeck.Cards == null)
            selectedDeck.Cards = new List<Card>();
        selectedDeck.Cards.AddRange(UserCards);
        await UserCardsChanged.InvokeAsync(UserCards);
    }
    void ToggleVocab()
    {
        toggleLabel = toggleLabel == "Standard Card" ? "Vocabulary Card" : "Standard Card";
    }

    async Task AddCardToDeck()
    {
        if (selectedDeck.Cards == null)
            selectedDeck.Cards = new List<Card>();
        var newCard = new Card() { Question = question, Answer = answer };
        selectedDeck.Cards.Add(newCard);
        await Database.AddCardToDeck(newCard, selectedDeck);
        question = null;
        answer = null;

        await UserCardsChanged.InvokeAsync(selectedDeck.Cards);
        StateHasChanged();
    }
    async Task CreateVocabCard()
    {
        if (wordSearch == null)
            return;
        var definition = await WordsApi.GetDefinitions(wordSearch);
        var firstDefinition = definition?.Definitions?.FirstOrDefault() ?? new DefinitionData() { Definition = "NO DEFINITONA FOUND" };
        var newCard = new Card()
        {
            Question = wordSearch,
            Answer = $"<strong>Definition:</strong> {firstDefinition.Definition} <p><strong>Part of Speech: </strong> {firstDefinition.PartOfSpeech} </p>"
        };
        if (selectedDeck.Cards == null)
            selectedDeck.Cards = new List<Card>();
        selectedDeck.Cards.Add(newCard);
        await Database.AddCardToDeck(newCard, selectedDeck);
        wordSearch = null;
        StateHasChanged();
    }
    async Task VocakKeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await CreateVocabCard();
        }
    }
}
